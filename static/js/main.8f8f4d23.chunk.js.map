{"version":3,"sources":["logo.svg","Helpers/AnimationHelper.js","Redux_Assets/Reducer/reducer.js","Redux_Assets/Store/store.js","Redux_Assets/Store/storeFactory.js","Helpers/randomArrayGenerator.js","Components/ArrayOptions.js","Components/VisualizerOptions.js","Components/Visualizer.js","Views/VisualizerCore.js","App.js","reportWebVitals.js","index.js"],"names":["addFocusAnimation","left","right","animations","push","name","addSelectAnimation","index1","index2","addMoveAnimation","itemIndex","toIndex","mergeSortHelper","array","sortedArray","mergeSort","length","unsortedArray","leftIndex","rightIndex","middle","Math","ceil","realMiddle","floor","leftArr","slice","rightArr","end","addSplitAnimation","start","addMergeAnimation","leftBound","rightBound","resultArray","realLeftIndex","realRightIndex","concat","merge","store","createStore","state","currentArray","splitEnds","currentFocus","selected","frames","currentAnimation","settings","delay","isPaused","action","type","randArr","size","arr","current","number","random","handleGenerateRandArr","payload","produce","draftState","solution","newArray","item","splice","filter","e","window","__REDUX_DEVTOOLS_EXTENSION__","connect","props","React","useState","slider1Value","setSlider1Value","slider1Ref","useRef","useEffect","Slider","create","step","range","min","max","on","values","handle","parseInt","Card","style","maxHeight","height","CardHeader","backgroundColor","className","CardBody","Row","justifyContent","alignItems","width","display","marginRight","color","ref","minWidth","marginTop","Button","onClick","dispatch","active","JSON","stringify","setTimeout","marginBottom","maxWidth","margin","map","index","console","log","some","isSplit","includes","divider","Fragment","borderTopRightRadius","borderTopLeftRadius","Container","padding","Col","xs","md","sm","App","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f8f4d23.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function addFocusAnimation (left, right, animations) {\r\n    // console.log({name: \"focus\", left: left, right: right});\r\n    animations.push({name: \"focus\", left: left, right: right});\r\n    return animations;\r\n}\r\n\r\nfunction addMergeAnimation (start, end, animations) {\r\n    animations.push({name: \"merge\", start: start, end: end});\r\n    return animations;\r\n}\r\n\r\nfunction addSplitAnimation(right, animations){\r\n    animations.push({name: \"split\", end: right});\r\n    return animations;\r\n}\r\n\r\nfunction addSelectAnimation(index1,index2, animations){\r\n    animations.push({name: \"select\", index1, index2});\r\n    return animations;\r\n}\r\n\r\nfunction addMoveAnimation(itemIndex,toIndex, animations){\r\n    animations.push({name: \"move\", itemIndex, toIndex});\r\n    return animations;\r\n}\r\n\r\nexport function mergeSortHelper(array) {\r\n    let animations = [];\r\n\r\n    let sortedArray = [...array];\r\n\r\n    sortedArray = mergeSort(sortedArray, 0, sortedArray.length-1, animations);\r\n    return {sortedArray, animations};\r\n}\r\n\r\n\r\n// Merge Sort Implentation (Recursion)\r\nexport function mergeSort (unsortedArray, leftIndex, rightIndex, animations) {\r\n    // No need to sort the array if the array only has one element or empty\r\n\r\n    addFocusAnimation (leftIndex, rightIndex, animations);\r\n    addSelectAnimation(leftIndex, rightIndex, animations);\r\n    if (unsortedArray.length <= 1) {\r\n        return unsortedArray;\r\n    }\r\n\r\n    // In order to divide the array in half, we need to figure out the middle\r\n    const middle = Math.ceil(unsortedArray.length / 2);\r\n\r\n\r\n    const realMiddle = Math.floor(((leftIndex+rightIndex)/2));\r\n    // This is where we will be dividing the array into left and right\r\n    let leftArr = unsortedArray.slice(0, middle);\r\n    let rightArr = unsortedArray.slice(middle);\r\n\r\n    addSplitAnimation(realMiddle, animations);\r\n    // Using recursion to combine the left and right\r\n    leftArr = mergeSort(leftArr, leftIndex, realMiddle, animations);\r\n\r\n    rightArr = mergeSort(rightArr, realMiddle+1, rightIndex, animations);\r\n\r\n    addFocusAnimation (leftIndex, rightIndex, animations)\r\n    addSelectAnimation(leftIndex, rightIndex, animations);\r\n    addMergeAnimation(leftIndex, rightIndex, animations);\r\n    let mergedArr = merge(leftArr, rightArr, leftIndex, realMiddle+1, animations);\r\n\r\n    return mergedArr;\r\n}\r\n\r\nfunction merge (left, right, leftBound, rightBound, animations) {\r\n    let resultArray = [], leftIndex = 0, rightIndex = 0;\r\n    let realLeftIndex = leftBound;\r\n    let realRightIndex = rightBound;\r\n    // We will concatenate values into the resultArray in order\r\n    while (leftIndex < left.length && rightIndex < right.length) {\r\n        addSelectAnimation(leftBound, rightBound, animations);\r\n        if (left[leftIndex] < right[rightIndex]) {\r\n            resultArray.push(left[leftIndex]);\r\n            addSelectAnimation(realLeftIndex, realRightIndex, animations);\r\n            addMoveAnimation(realLeftIndex,realLeftIndex,animations);\r\n\r\n            leftIndex++; // move left array cursor\r\n            realLeftIndex++;\r\n        } else {\r\n            resultArray.push(right[rightIndex]);\r\n            addSelectAnimation(realLeftIndex, realRightIndex, animations);\r\n            addMoveAnimation(realRightIndex,realLeftIndex,animations);\r\n            rightIndex++; // move right array cursor\r\n            realLeftIndex++;\r\n            realRightIndex++;\r\n        }\r\n    }\r\n\r\n    // We need to concat here because there will be one element remaining\r\n    // from either left OR the right\r\n    return resultArray\r\n        .concat(left.slice(leftIndex))\r\n        .concat(right.slice(rightIndex));\r\n}","import {storeFactory} from \"../Store/storeFactory.js\";\r\nimport produce from \"immer\";\r\nimport handleGenerateRandArr from \"../../Helpers/randomArrayGenerator\";\r\nimport {mergeSortHelper} from \"../../Helpers/AnimationHelper\";\r\n\r\nexport const reducer = (state = storeFactory(), action) => {\r\n    switch(action.type) {\r\n        case \"randomize\":\r\n            const randArr = handleGenerateRandArr(action.payload.size);\r\n            return produce(state, draftState => {\r\n                draftState.array.unsortedArray = randArr\r\n                draftState.array.sortedArray = randArr\r\n                draftState.array.currentArray = randArr\r\n                const {sortedArray: solution, animations: frames} = mergeSortHelper(draftState.array.unsortedArray);\r\n                draftState.array.sortedArray = solution;\r\n                draftState.array.currentFocus = [0, draftState.array.unsortedArray.length-1];\r\n                draftState.animations.frames = frames;\r\n                draftState.array.splitEnds = [];\r\n                draftState.animations.currentAnimation = 0;\r\n                draftState.settings.isPaused = true;\r\n                draftState.array.selected = [];\r\n            });\r\n        case \"play\":\r\n            return produce(state, draftState => {\r\n                draftState.settings.isPaused = false\r\n                draftState.settings.delay = action.payload.delay\r\n            });\r\n        case \"pause\":\r\n            return produce(state, draftState => {\r\n                draftState.settings.isPaused = true\r\n\r\n            });\r\n        case \"reset\":\r\n            return produce(state, draftState => {\r\n                draftState.settings.isPaused = true\r\n                draftState.array.sortedArray = draftState.array.unsortedArray\r\n                draftState.array.currentArray = draftState.array.unsortedArray\r\n                const {sortedArray: solution, animations: frames} = mergeSortHelper(draftState.array.unsortedArray);\r\n                draftState.array.sortedArray = solution;\r\n                draftState.animations.frames = frames;\r\n                draftState.animations.currentAnimation = 0;\r\n                draftState.array.currentFocus = [0, draftState.array.unsortedArray.length-1];\r\n                draftState.array.splitEnds = [];\r\n                draftState.array.selected = [];\r\n            });\r\n        case \"resetFrames\":\r\n            return produce(state, draftState => {\r\n            draftState.animations.currentAnimation = 0;\r\n            draftState.settings.isPaused = true;\r\n        });\r\n\r\n        case \"processNextFrame\":\r\n            return produce(state, draftState => {\r\n                    try {\r\n                        switch (draftState.animations.frames[draftState.animations.currentAnimation].name) {\r\n                            case \"focus\":\r\n                                draftState.array.currentFocus = [draftState.animations.frames[draftState.animations.currentAnimation].left, draftState.animations.frames[draftState.animations.currentAnimation].right];\r\n                                break;\r\n                            case \"move\":\r\n                                let itemIndex = draftState.animations.frames[draftState.animations.currentAnimation].itemIndex;\r\n                                let leftBound = draftState.animations.frames[draftState.animations.currentAnimation].toIndex;\r\n                                if (itemIndex !== leftBound) {\r\n                                    let newArray = [...draftState.array.currentArray];\r\n                                    let item = newArray.splice(itemIndex, 1);\r\n                                    newArray.splice(leftBound, 0, item[0]);\r\n                                    draftState.array.currentArray = newArray;\r\n                                }\r\n                                break;\r\n                            case \"split\":\r\n                                draftState.array.splitEnds.push(draftState.animations.frames[draftState.animations.currentAnimation].end)\r\n                                break;\r\n                            case \"merge\":\r\n                                draftState.array.splitEnds = draftState.array.splitEnds.filter((item) => { return ((item < draftState.animations.frames[draftState.animations.currentAnimation].start) || (item >= draftState.animations.frames[draftState.animations.currentAnimation].end))});\r\n                                break;\r\n                            case \"select\":\r\n                                draftState.array.selected = [draftState.animations.frames[draftState.animations.currentAnimation].index1, draftState.animations.frames[draftState.animations.currentAnimation].index2];\r\n\r\n                        }\r\n                    } catch (e) {}\r\n                    draftState.animations.currentAnimation = draftState.animations.currentAnimation + 1;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport {reducer} from \"../Reducer/reducer\";\r\n\r\nexport const store = createStore(reducer, /* preloadedState, */window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","export const storeFactory = (array) => {\r\n    return ({\r\n        array: {\r\n            unsortedArray: [],\r\n            sortedArray: [],\r\n            currentArray: [],\r\n            splitEnds: [],\r\n            currentFocus: [],\r\n            selected: [],\r\n        },\r\n        animations: {\r\n            frames: [],\r\n            currentAnimation: [],\r\n        },\r\n        settings: {\r\n            // maxItems: 5,\r\n            delay: .01,\r\n            isPaused: true,\r\n        }\r\n    });\r\n}","export default function handleGenerateRandArr(size){\r\n    size = size?size:100;\r\n    let arr = [];\r\n    let current = 0;\r\n    while(current < size){\r\n        let number = 0;\r\n        while(number < 1){\r\n            number = Math.floor(Math.random() * 1000);\r\n        }\r\n        arr.push(number);\r\n        current++;\r\n    }\r\n    return arr;\r\n}","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    UncontrolledTooltip, CardHeader, Form,\r\n} from \"reactstrap\";\r\n\r\nimport Slider from \"nouislider\";\r\n\r\nlet ArrayOptions = (props) => {\r\n    const [slider1Value, setSlider1Value] = React.useState(\"100.00\");\r\n    const slider1Ref = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        try {\r\n            Slider.create(slider1Ref.current, {\r\n                start: [6],\r\n                connect: [true, false],\r\n                step: 1,\r\n                range: { min: 5.0, max: 100.0 },\r\n            }).on(\"update\", function (values, handle) {\r\n                setSlider1Value(parseInt(values[0]));\r\n            });\r\n        } catch (e) {}\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Card style={{maxHeight: \"800px\", height: \"100%\"    }}>\r\n            <CardHeader style={{backgroundColor: \"\"}}>\r\n                {/*<h6 className=\"surtitle\">Sorting Visualizer</h6>*/}\r\n                <h5 className=\"h3 mb-0\">Array Options</h5>\r\n            </CardHeader>\r\n            <CardBody>\r\n\r\n                {/*<Row> <h4>Number of Items</h4> </Row>*/}\r\n                <Row style={{justifyContent: \"center\", alignItems: \"center\"}}>\r\n\r\n                    {/*<div className=\"input-slider-container\">*/}\r\n                    <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                    <span className=\"range-slider-value\" style={{maxHeight: \"25px\", marginRight: \"15px\"}}>\r\n                        {`Size: ${slider1Value}`}\r\n                                            </span>\r\n                    <div className=\"input-slider\" color=\"info\" ref={slider1Ref} style={{display: \"flex\", width: \"auto\", minWidth: \"60%\", marginRight: \"10px\"}} />\r\n                    </div>\r\n                    {/*</div>*/}\r\n                </Row>\r\n                <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", marginTop: \"15px\"}}>\r\n                    <Button size=\"lg\" color={\"success\"} onClick={() => props.dispatch({type: \"randomize\", payload: {size: slider1Value}})}>Randomize</Button>\r\n                    <Button size=\"lg\" color={\"danger\"} onClick={() => props.dispatch({type: \"reset\"})}>Reset</Button>\r\n                </div>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return ({\r\n        settings: state.settings\r\n    });\r\n}\r\n\r\nexport default connect(mapStateToProps)(ArrayOptions);\r\n","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    UncontrolledTooltip, CardHeader, Form,\r\n} from \"reactstrap\";\r\n\r\nimport Slider from \"nouislider\";\r\n\r\n\r\n\r\nlet VisualizerOptions = (props) => {\r\n    const [slider1Value, setSlider1Value] = React.useState(\"100.00\");\r\n    const slider1Ref = React.useRef(null);\r\n    let active = true;\r\n    if( JSON.stringify(props.array.currentArray)==JSON.stringify( props.array.sortedArray)){\r\n        active = false;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        try {\r\n            Slider.create(slider1Ref.current, {\r\n                start: [.01],\r\n                connect: [true, false],\r\n                step: .01,\r\n                range: { min: .01, max: 100 },\r\n            }).on(\"update\", function (values, handle) {\r\n                setSlider1Value(values[0]);\r\n            });\r\n        } catch (e) {}\r\n\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        let currentAnimation = props.animations.currentAnimation;\r\n        let length = props.animations.frames.length;\r\n        if(!props.settings.isPaused && currentAnimation < length){\r\n            setTimeout(()=>{props.dispatch({type: \"processNextFrame\"})},props.settings.delay);\r\n        }\r\n\r\n        if(currentAnimation >= length){\r\n            props.dispatch({type: \"resetFrames\"});\r\n        }\r\n\r\n\r\n\r\n    }, [props.animations, props.settings.isPaused]);\r\n\r\n    return (\r\n        <Card style={{maxHeight: \"800px\", height: \"100%\"}}>\r\n            <CardHeader style={{backgroundColor: \"\"}}>\r\n                {/*<h6 className=\"surtitle\">Sorting Visualizer</h6>*/}\r\n                <h5 className=\"h3 mb-0\">Visualizer Options</h5>\r\n            </CardHeader>\r\n            <CardBody>\r\n\r\n                {/*<Row> <h4>Number of Items</h4> </Row>*/}\r\n                <Row style={{justifyContent: \"center\", alignItems: \"center\"}}>\r\n\r\n                    {/*<div className=\"input-slider-container\">*/}\r\n                    <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                    <span className=\"range-slider-value\" style={{maxHeight: \"25px\", marginRight: \"15px\"}}>\r\n                        {`${slider1Value}ms`}\r\n                    </span>\r\n                        <div className=\"input-slider\" color=\"info\" ref={slider1Ref} style={{display: \"flex\", width: \"auto\", minWidth: \"60%\", marginRight: \"10px\"}} />\r\n                    </div>\r\n                    {/*</div>*/}\r\n                </Row>\r\n                <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", marginTop: \"15px\"}}>\r\n                    { active? props.settings.isPaused ? <Button size=\"lg\" color={\"success\"} onClick={\r\n                        () => {\r\n                            if(active){\r\n                                props.dispatch({type: \"play\",payload: { delay: slider1Value}});\r\n                            }\r\n                        }\r\n                    }>Play</Button>: <Button size=\"lg\" color={\"info\"} onClick={() => props.dispatch({type: \"pause\"})}>Pause</Button>: \"\"}\r\n                </div>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return ({\r\n        ...state\r\n    });\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps)(VisualizerOptions);\r\n","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    UncontrolledTooltip, CardHeader, Form,\r\n} from \"reactstrap\";\r\n\r\n\r\nlet Visualizer = (props) => {\r\n    let backgroundColor=\"\";\r\n\r\n    return (\r\n        <Card style={{height: \"100%\", marginBottom: \"0\"}}>\r\n            <CardHeader style={{backgroundColor: \"\"}}>\r\n                {/*<h6 className=\"surtitle\"></h6>*/}\r\n                <h5 className=\"h3 mb-0\">Mergesort Visualizer</h5>\r\n            </CardHeader>\r\n            <CardBody>\r\n            {/*    default: \"#172b4d\",\r\n                   primary: \"#5e72e4\",\r\n                   secondary: \"#f4f5f7\",\r\n                   info: \"#11cdef\",\r\n                   success: \"#2dce89\",\r\n                   danger: \"#f5365c\",\r\n                    warning: \"#fb6340\",*/}\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"flex-end\",\r\n                        maxWidth: \"100%\",\r\n                        margin: \"0\",\r\n                        height: \"100%\"\r\n                    }}>\r\n                                {\r\n                                    props.array.currentArray.map((item, index) =>{\r\n                                            if (JSON.stringify(props.array.currentArray)==JSON.stringify( props.array.sortedArray)) {\r\n                                                console.log(\"Hello\");\r\n                                                backgroundColor = \"#2dce89\";\r\n                                            }\r\n                                            else {\r\n                                                backgroundColor = props.array.currentFocus[0] <= index && index <= props.array.currentFocus[1]? \"#5e72e4\": \"lightgrey\";\r\n                                                backgroundColor = props.array.selected.some((item) => index === item)? \"#fb6340\": backgroundColor;\r\n                                            }\r\n                                            console.log(backgroundColor);\r\n\r\n                                            let isSplit = false;\r\n                                            if(props.array.splitEnds){\r\n                                                isSplit = props.array.splitEnds.includes(index)?true:false;\r\n                                            }\r\n\r\n                                            // let marginRight = isSplit ? \"15px\":\"1px\";\r\n                                            let divider = isSplit? <div style={{width: \"5px\", height: \"100%\", backgroundColor: \"red\", margin: \"0 10px\"}}></div>: \"\";\r\n                                            return (\r\n                                                <React.Fragment>\r\n                                            <div key={index} style={{\r\n                                                    backgroundColor: `${backgroundColor}`,\r\n                                                    height: `${item/4}px`,\r\n                                                    width: `${props.array.currentArray.length*.50}%`,\r\n                                                    marginRight: \"1px\",\r\n                                                    minWidth: \".1px\",\r\n                                                    borderTopRightRadius: \"5px\",\r\n                                                    borderTopLeftRadius: \"5px\",\r\n                                                }}>\r\n\r\n                                            </div>\r\n                                                {divider}\r\n                                            </React.Fragment>\r\n\r\n                                      );\r\n                                    }\r\n                                    )}\r\n                    </div>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return ({\r\n        ...state\r\n    });\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps)(Visualizer);\r\n","import {connect} from \"react-redux\";\r\nimport ArrayOptions from \"../Components/ArrayOptions\";\r\nimport VisualizerOptions from \"../Components/VisualizerOptions\";\r\nimport Visualizer from \"../Components/Visualizer\";\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n} from \"reactstrap\";\r\n\r\n\r\nlet VisualizerCore = (props) => {\r\n    if (props.array.unsortedArray.length===0){\r\n        props.dispatch({type: \"randomize\", payload: {size: 6}});\r\n    }\r\n    return (\r\n        <>\r\n            {/*{use grid system, with rows and columns}*/}\r\n            <Container style={{padding: \"20px 0 0 0\", maxWidth: \"90%\"}}>\r\n                <Row >\r\n                    <Col xs={12} style={{padding: \"0\"}}>\r\n                    <Visualizer></Visualizer>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{margin: \"\", display: \"flex\", justifyContent: \"space-around\"}}>\r\n                    <Col md={5} sm={12} xs={12} style={{marginTop: \"15px\", padding: \"0\"}}>\r\n                        <ArrayOptions></ArrayOptions>\r\n                    </Col>\r\n                    <Col  md={5} sm={12} xs={12} style={{marginTop: \"15px\", padding: \"0\"}}>\r\n                        <VisualizerOptions></VisualizerOptions>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return ({\r\n      ...state\r\n    });\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps)(VisualizerCore);","import logo from './logo.svg';\nimport './App.css';\nimport {store} from \"./Redux_Assets/Store/store.js\";\nimport redux from \"redux\";\nimport {Provider} from \"react-redux\";\nimport VisualizerCore from \"./Views/VisualizerCore\";\n\n\nfunction App() {\n  return (\n  <Provider store={store}>\n      <div style={{\n        backgroundColor: \"#282c34\",\n        minHeight: \"100vh\",\n        height: \"100%\",\n        color: \"white\"\n      }}>\n          <VisualizerCore></VisualizerCore>\n      </div>\n  </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// core styles\nimport \"assets/scss/argon-dashboard-pro-react.scss?v1.2.0\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}